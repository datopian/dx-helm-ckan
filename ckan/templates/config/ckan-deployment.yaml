apiVersion: v1
kind: ConfigMap
metadata:
  name: ckan-deployment
data:
  get_details.py: |
    #!/usr/bin/env python

    import sys
    def get_details_from_sql_string(sql_string):
        sql_string = str(sql_string)
        sql_string = sql_string.split('://')[1]
        database = sql_string.split('/')[-1]
        username, password = sql_string.split(':')
        # In case of AzureSQL users also have @ in usernames Eg postgresadmin@xyzpostgres
        password = password.split('@')[0]
        print(database, username, password)

    if __name__ == "__main__":
        sql_string = sys.argv[1]
        get_details_from_sql_string(sql_string)

  initContainer.sh: |
    #!/usr/bin/env bash

    # Create the Base for the Database and the Role Needed
    create_db_base() {
        echo "Create Database Base and Role"
        local POSTGRES_HOST="${1}"
        local POSTGRES_SUPERUSER="${2}"
        local USER="${3}"
        local PASSWORD="${4}"
        local DATABASE="${5}"
        if [[ "${POSTGRES_SUPERUSER}" == *"@"* ]]; then
            DB_NAME_FOR_AZ="-d postgres"
        fi

        ( [ -z "${POSTGRES_HOST}" ] || [ -z "${POSTGRES_SUPERUSER}" ] || [ -z "${USER}" ] || [ -z "${PASSWORD}" ] ) && return 1
        echo Initializing ${USER} on ${POSTGRES_HOST}

        # Create ROLE
        if [ "$( psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -tAc "SELECT 1 FROM pg_catalog.pg_roles where rolname ='${USER}';" )" = '1' ]
        then
            echo "Role already exists"
        else
            psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -c "
                CREATE ROLE \"${USER}\" WITH LOGIN PASSWORD '${PASSWORD}' NOSUPERUSER NOCREATEDB NOCREATEROLE;
            "
        fi

        # Create Database
        if [ "$( psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -tAc "SELECT 1 FROM pg_database WHERE datname='${DATABASE}';" )" = '1' ]
        then
            echo "Database already exists"
        else
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -c "
            CREATE DATABASE \"${DATABASE}\";
        "
        fi
    }

    create_ckan_db() {
        # Create Database
        echo "Create Database"
        local POSTGRES_HOST="${1}"
        local POSTGRES_SUPERUSER="${2}"
        local USER="${3}"
        local PASSWORD="${4}"
        local DATABASE="${5}"
        ! create_db_base "${POSTGRES_HOST}" "${POSTGRES_SUPERUSER}" "${USER}" "${PASSWORD}" "${DATABASE}" && return 1

        #  Create Extensions
        echo initializing postgis extensions &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" -d "${DATABASE}" -c "
            CREATE EXTENSION IF NOT EXISTS postgis;
            CREATE EXTENSION IF NOT EXISTS postgis_topology;
            CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
            CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
        " &&\
        echo postgis extensions initialized successfully && return 0
        echo postgis extensions failed && return 1
    }

    datastore() {
        local DS_DATABASE="${1}"
        local DS_RW_USER="${2}"
        local DS_RO_USER="${3}"

        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" -d "${DS_DATABASE}" -c "
        GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"${DS_RO_USER}\";
        ALTER DEFAULT PRIVILEGES FOR USER \"${DS_RW_USER}\" IN SCHEMA public GRANT SELECT ON TABLES TO \"${DS_RO_USER}\";

        CREATE OR REPLACE VIEW "_table_metadata" AS
            SELECT DISTINCT
                substr(md5(dependee.relname || COALESCE(dependent.relname, '')), 0, 17) AS "_id",
                dependee.relname AS name,
                dependee.oid AS oid,
                dependent.relname AS alias_of
            FROM
                pg_class AS dependee
                LEFT OUTER JOIN pg_rewrite AS r ON r.ev_class = dependee.oid
                LEFT OUTER JOIN pg_depend AS d ON d.objid = r.oid
                LEFT OUTER JOIN pg_class AS dependent ON d.refobjid = dependent.oid
            WHERE
                (dependee.oid != dependent.oid OR dependent.oid IS NULL) AND
                -- is a table (from pg_tables view definition)
                -- or is a view (from pg_views view definition)
                (dependee.relkind = 'r'::"char" OR dependee.relkind = 'v'::"char")
                AND dependee.relnamespace = (
                    SELECT oid FROM pg_namespace WHERE nspname='public')
            ORDER BY dependee.oid DESC;
        ALTER VIEW "_table_metadata" OWNER TO \"${CKAN_USER}\";
        GRANT SELECT ON "_table_metadata" TO \"${DS_RO_USER}\";

        CREATE OR REPLACE FUNCTION populate_full_text_trigger() RETURNS trigger
        AS \$body\$
            BEGIN
                IF NEW._full_text IS NOT NULL THEN
                    RETURN NEW;
                END IF;
                NEW._full_text := (
                    SELECT to_tsvector(string_agg(value, ' '))
                    FROM json_each_text(row_to_json(NEW.*))
                    WHERE key NOT LIKE '\_%');
                RETURN NEW;
            END;
        \$body\$ LANGUAGE plpgsql;
        ALTER FUNCTION populate_full_text_trigger() OWNER TO \"${CKAN_USER}\";

        DO \$body\$
            BEGIN
                EXECUTE coalesce(
                    (SELECT string_agg(
                        'CREATE TRIGGER zfulltext BEFORE INSERT OR UPDATE ON ' ||
                        quote_ident(relname) || ' FOR EACH ROW EXECUTE PROCEDURE ' ||
                        'populate_full_text_trigger();', ' ')
                    FROM pg_class
                    LEFT OUTER JOIN pg_trigger AS t
                        ON t.tgrelid = relname::regclass AND t.tgname = 'zfulltext'
                    WHERE relkind = 'r'::"char" AND t.tgname IS NULL
                        AND relnamespace = (
                            SELECT oid FROM pg_namespace WHERE nspname='public')),
                    'SELECT 1;');
            END;
        \$body\$;

        "
    }

    create_datastore_db() {
        local POSTGRES_HOST="${1}"
        local POSTGRES_SUPERUSER="${2}"
        local CKAN_USER="${3}"
        local DS_RW_USER="${4}"
        local DS_RW_PASSWORD="${5}"
        local DS_RO_USER="${6}"
        local DS_RO_PASSWORD="${7}"
        local DS_DATABASE="${8}"
        if [[ "${POSTGRES_SUPERUSER}" == *"@"* ]]; then
            DB_NAME_FOR_AZ="-d postgres"
        fi
        POSTGRES_USER_HOSTLESS=$(echo $POSTGRES_USER | cut -f1 -d"@")
        CKAN_DATABASE=$(echo $CKAN_USER | cut -f1 -d"@")
        DATASTORE_DATABASE=$(echo $DS_RW_USER | cut -f1 -d"@")

       ! create_db_base "${POSTGRES_HOST}" "${POSTGRES_SUPERUSER}" "${DS_RW_USER}" "${DS_RW_PASSWORD}" "${DS_DATABASE}" && return 1
        ( [ -z "${CKAN_USER}" ] || [ -z "${DS_RO_USER}" ] || [ -z "${DS_RO_PASSWORD}" ] ) && return 1
        echo Initializing datastore DB ${DS_RW_USER} on ${POSTGRES_HOST}

        # Create ROLE
        if [ "$( psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -tAc "SELECT 1 FROM pg_catalog.pg_roles where rolname ='${DS_RO_USER}';" )" = '1' ]
        then
            echo "Role already exists"
        else
            psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" ${DB_NAME_FOR_AZ} -c "
                CREATE ROLE \"${DS_RO_USER}\" WITH LOGIN PASSWORD '${DS_RO_PASSWORD}' NOSUPERUSER NOCREATEDB NOCREATEROLE;
            "
        fi

        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" -d "${DS_DATABASE}" -c "
            GRANT \"${CKAN_USER}\" to "${POSTGRES_USER_HOSTLESS}";
            GRANT \"${DS_RW_USER}\" to "${POSTGRES_USER_HOSTLESS}";
            GRANT \"${DS_RO_USER}\" to "${POSTGRES_USER_HOSTLESS}";

            ALTER DATABASE \"${CKAN_DATABASE}\" OWNER TO \"${CKAN_USER}\";
            ALTER DATABASE \"${DATASTORE_DATABASE}\" OWNER TO \"${DS_RW_USER}\";
        "

        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" -d "${DS_DATABASE}" -c "
            -- revoke permissions for the read-only user
            REVOKE CREATE ON SCHEMA public FROM PUBLIC;
            REVOKE USAGE ON SCHEMA public FROM PUBLIC;

            GRANT CREATE ON SCHEMA public TO \"${CKAN_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${CKAN_USER}\";

            GRANT CREATE ON SCHEMA public TO \"${DS_RW_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${DS_RW_USER}\";

            -- take connect permissions from main db
            REVOKE CONNECT ON DATABASE \"${CKAN_DATABASE}\" FROM \"${DS_RO_USER}\";

            -- grant select permissions for read-only user
            GRANT CONNECT ON DATABASE \"${DATASTORE_DATABASE}\" TO \"${DS_RO_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${DS_RO_USER}\";

            -- grant access to current tables and views to read-only user
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"${DS_RO_USER}\";

            -- grant access to new tables and views by default
            ALTER DEFAULT PRIVILEGES FOR USER \"${DS_RW_USER}\" IN SCHEMA public
            GRANT SELECT ON TABLES TO \"${DS_RO_USER}\";
        " &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_SUPERUSER}" -d "${DATASTORE_DATABASE}" -c "
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"${DS_RO_USER}\";
            ALTER DEFAULT PRIVILEGES FOR USER \"${DS_RW_USER}\" IN SCHEMA public GRANT SELECT ON TABLES TO \"${DS_RO_USER}\";
        "

        ! datastore "$DS_DATABASE" "$DS_RW_USER" "$DS_RO_USER" && return 1

    }


    init(){
        # Setting Global Env
        POSTGRES_USER="${POSTGRES_USER:-${CKAN_CLOUD_POSTGRES_USER}}"
        POSTGRES_HOST="${CKAN_CLOUD_POSTGRES_HOST}"

        CKAN_URL="${CKAN_SQLALCHEMY_URL}"
        DATASTORE_WRITE_URL="${CKAN__DATASTORE__WRITE_URL}"
        DATASTORE_READ_URL="${CKAN__DATASTORE__READ_URL}"

        echo "Setting the ENV from the SQL String for CKAN"
        ckan_database=($(python3 /etc/config/get_details.py "${CKAN_URL}"))

        export CKAN_DB=${ckan_database[0]}
        export CKAN_DB_USERNAME=${ckan_database[1]}
        export CKAN_DB_PASSWORD=${ckan_database[2]}
        export CKAN_DB_USERNAME_HOSTLESS=$(echo $CKAN_DB_USERNAME | cut -f1 -d"@")


        echo Using centralized DB
        ! create_ckan_db "${POSTGRES_HOST}" "${POSTGRES_USER:-postgres}" "${CKAN_DB_USERNAME_HOSTLESS}" "${CKAN_DB_PASSWORD}" "${CKAN_DB}" \
            && echo "TEST"
        ! create_ckan_db "${POSTGRES_HOST}" "${POSTGRES_USER:-postgres}" "${CKAN_DB_USERNAME}" "${CKAN_DB_PASSWORD}" "${CKAN_DB}" \
            && echo "TEST"

        echo "Setting the ENV from the SQL String for CKAN"
        datastore_write=($(python3 /etc/config/get_details.py "${DATASTORE_WRITE_URL}"))
        export DS_DB=${datastore_write[0]}
        export DS_RW_USER=${datastore_write[1]}
        export DS_RW_PASS=${datastore_write[2]}
        export DS_DB_RW_USER_HOSTLESS=$(echo $DS_RW_USER | cut -f1 -d"@")

        datastore_read=($(python3 /etc/config/get_details.py "${DATASTORE_READ_URL}"))
        export DS_RO_USER=${datastore_read[1]}
        export DS_RO_PASS=${datastore_read[2]}
        export DS_DB_RO_USER_HOSTLESS=$(echo $DS_RO_USER | cut -f1 -d"@")

        ! create_datastore_db "${POSTGRES_HOST}" "${POSTGRES_USER:-postgres}" "${CKAN_DB_USERNAME}" \
                                "${DS_RW_USER_HOSTLESS}" "${DS_RW_PASS}" \
                                "${DS_RO_USER_HOSTLESS}" "${DS_RO_PASS}" \
                                "${DS_DB}" \
            && echo "TEST"
        ! create_datastore_db "${POSTGRES_HOST}" "${POSTGRES_USER:-postgres}" "${CKAN_DB_USERNAME}" \
                                "${DS_RW_USER}" "${DS_RW_PASS}" \
                                "${DS_RO_USER}" "${DS_RO_PASS}" \
                                "${DS_DB}" \
            && echo "TEST"
        CENTRALIZED_DB=1

    }
    init
